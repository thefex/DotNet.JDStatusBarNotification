#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef JDSTATUSBARNOTIFICATION_SWIFT_H
#define JDSTATUSBARNOTIFICATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JDStatusBarNotification",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// These included styles let you easily change the visual appearance of a
/// notification without creating your own custom style.
/// Note that only the <code>IncludedStatusBarNotificationStyle/defaultStyle</code> is dynamic
/// and adjusts for light- & dark-mode. Other styles have a fixed appearance.
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationIncludedStyle, "IncludedStatusBarNotificationStyle", open) {
/// The default style. This is used when no other style was provided and the
/// default style wasn’t replaced by the user. This is a dynamic style matching
/// the <code>light</code> style in light mode and <code>dark</code> style in dark mode.
  JDStatusBarNotificationIncludedStyleDefaultStyle = 0,
/// A white background with a gray text.
  JDStatusBarNotificationIncludedStyleLight = 1,
/// A nearly black background with a nearly white text.
  JDStatusBarNotificationIncludedStyleDark = 2,
/// A green background with a white text.
  JDStatusBarNotificationIncludedStyleSuccess = 3,
/// A yellow background with a gray text.
  JDStatusBarNotificationIncludedStyleWarning = 4,
/// A red background with a white text.
  JDStatusBarNotificationIncludedStyleError = 5,
/// A black background with a green bold monospace text.
  JDStatusBarNotificationIncludedStyleMatrix = 6,
};

@class UIView;
@protocol JDStatusBarNotificationPresenterCustomViewSizingController;
@class NSString;
@class JDStatusBarNotificationStyle;
@class UIWindowScene;

/// The NotificationPresenter let’s you present notifications below the statusBar.
/// You can customize the style (colors, fonts, etc.) and animations. It supports notch
/// and no-notch devices, landscape & portrait layouts and Drag-to-Dismiss. It can display a
/// title, a subtitle, an activity indicator, an animated progress bar & custom views out of the box.
/// To customize the appearance, see the <em>Customize the style</em> section. To see all customization
/// options, see the <code>StatusBarNotificationStyle</code> documentation.
/// While a notification is displayed, a separate window is presented on top of your application
/// window. Upon dismissal this window, its view controller and all its views are removed from
/// memory. The presenter class itself is a singleton which will stay in memory for the lifetime of
/// your application once it was created. The default <code>StatusBarNotificationStyle</code> and any styles
/// added by the user also stay in memory permanently.
SWIFT_CLASS_NAMED("NotificationPresenter")
@interface JDStatusBarNotificationPresenter : NSObject
/// Provides access to the shared presenter. This is the entry point to present, style and dismiss notifications.
///
/// returns:
/// An initialized <code>NotificationPresenter</code> instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) JDStatusBarNotificationPresenter * _Nonnull sharedPresenter;)
+ (JDStatusBarNotificationPresenter * _Nonnull)sharedPresenter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Present a notification using a custom subview.
/// The <code>customView</code> will be layouted correctly according to the selected style & the current device
/// state (rotation, status bar visibility, etc.). The background will still be styled & layouted
/// according to the provided style. If your custom view requires custom touch handling,
/// make sure to set <code>style.canTapToHold</code> to <code>false</code>. Otherwise the <code>customView</code> won’t
/// receive any touches, as the internal <code>gestureRecognizer</code> would receive them.
/// \param customView A custom UIView to display as notification content.
///
/// \param sizingController An optional controller conforming to <code>NotificationPresenterCustomViewSizingController</code>, which controls the size of a presented custom view.
///
/// \param styleName The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
/// \param completion A <code>Completion</code> closure, which gets called once the presentation animation finishes.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithCustomView:(UIView * _Nonnull)customView sizingController:(id <JDStatusBarNotificationPresenterCustomViewSizingController> _Nullable)sizingController styleName:(NSString * _Nullable)styleName completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))completion;
/// Defines a new default style.
/// The new style will be used in all future presentations that have no specific style specified.
/// \param prepare Provides the current default <code>StatusBarNotificationStyle</code> instance for further customization.
///
- (void)updateDefaultStyle:(SWIFT_NOESCAPE JDStatusBarNotificationStyle * _Nonnull (^ _Nonnull)(JDStatusBarNotificationStyle * _Nonnull))prepare;
/// Adds a new named style - based on an included style, if given.(otherwise based on the default style)
/// This can later be used by referencing it using the <code>styleName</code>.
/// The added style can be used in future presentations by utilizing the same <code>styleName</code> in e.g. <code>present(_:subtitle:styleName:duration:completion:)</code>.
/// If a style with the same name already exists, it will be replaced.
/// \param name The styleName which will later be used to reference the added style.
///
/// \param includedStyle The <code>IncludedStatusBarNotificationStyle</code>, which you want to base your style on.
///
/// \param prepare Provides an <code>StatusBarNotificationStyle</code> instance based on the provided <code>includedStyle</code> for further customization.
///
///
/// returns:
/// Returns the <code>styleName</code>, so that this call can be used directly within a presentation call.
- (NSString * _Nonnull)addStyleNamed:(NSString * _Nonnull)name basedOnStyle:(enum JDStatusBarNotificationIncludedStyle)includedStyle prepare:(SWIFT_NOESCAPE JDStatusBarNotificationStyle * _Nonnull (^ _Nonnull)(JDStatusBarNotificationStyle * _Nonnull))prepare;
/// Displays a progress bar at the given <code>percentage</code>.
/// Displays the given percentage immediately without animation.
/// The progress bar will be styled according to the current <code>StatusBarNotificationProgressBarStyle</code>.
/// \param percentage The percentage in a range from 0.0 to 1.0
///
- (void)displayProgressBarWithPercentage:(double)percentage;
/// Displays a progress bar and animates it to the provided <code>percentage</code>.
/// Animates the progress bar from the currently set <code>percentage</code> to the provided <code>percentage</code> using the provided <code>duration</code>.
/// The progress bar will be styled according to the current <code>StatusBarNotificationProgressBarStyle</code>.
/// \param percentage Relative progress from 0.0 to 1.0
///
/// \param duration The duration of the animation from the current percentage to the provided percentage.
///
/// \param completion A <code>Completion</code>, which gets called once the progress bar animation finishes.
///
- (void)animateProgressBarToPercentage:(double)percentage animationDuration:(double)duration completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))completion;
/// Displays an activity indicator as the notifications left view.
/// It will have the same color as the text color of the current style by default.
/// The color can also be set explicitly by using the <code>leftViewStyle.tintColor</code>.
/// The layout is also defined by the <code>StatusBarNotificationLeftViewStyle</code>.
/// \param show Show or hide the activity indicator.
///
- (void)displayActivityIndicator:(BOOL)show;
/// Displays a view on the left side of the text.
/// The layout is defined by the <code>StatusBarNotificationLeftViewStyle</code>.
/// \param leftView A custom <code>UIView</code> to display on the left side of the text. E.g. an
/// icon / image / profile picture etc. A nil value removes an existing leftView.
///
- (void)displayLeftView:(UIView * _Nullable)leftView;
/// Updates the title of an existing notification without animation.
/// \param title The new title to display
///
- (void)updateText:(NSString * _Nonnull)title;
/// Updates the subtitle of an existing notification without animation.
/// \param subtitle The new subtitle to display
///
- (void)updateSubtitle:(NSString * _Nullable)subtitle;
/// Let’s you check if a notification is currently displayed.
///
/// returns:
/// <code>true</code> if a notification is currently displayed. Otherwise <code>false</code>.
@property (nonatomic, readonly) BOOL isVisible;
/// Lets you set an explicit <code>UIWindowScene</code>, in which notifications should be presented in. In most cases you don’t need to set this.
/// The <code>UIWindowScene</code> is usually inferred automatically, but if that doesn’t work for your setup, you can set it explicitly.
/// \param windowScene The <code>UIWindowScene</code> in which the notifcation should be presented.
///
- (void)setWindowScene:(UIWindowScene * _Nullable)windowScene;
@end



@interface JDStatusBarNotificationPresenter (SWIFT_EXTENSION(JDStatusBarNotification))
/// Present a notification
/// \param t The text to display as title
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t;
/// Present a notification
/// \param t The text to display as title
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes. It won’t be called after dismissal.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification
/// \param t The text to display as title
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes. It won’t be called after dismissal.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithTitle:(NSString * _Nonnull)t subtitle:(NSString * _Nonnull)st completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification
/// \param t The text to display as title
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t dismissAfterDelay:(double)d;
/// Present a notification using a custom style.
/// \param t The text to display as title
///
/// \param cu The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t customStyle:(NSString * _Nonnull)cu;
/// Present a notification using a custom style.
/// \param t The text to display as title
///
/// \param cu The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t customStyle:(NSString * _Nullable)cu completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification using a custom style.
/// \param t The text to display as title
///
/// \param st The text to display as subtitle
///
/// \param cu The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes. It won’t be called after dismissal.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithTitle:(NSString * _Nonnull)t subtitle:(NSString * _Nullable)st customStyle:(NSString * _Nullable)cu completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification using a custom style.
/// \param t The text to display as title
///
/// \param cu The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t dismissAfterDelay:(double)d customStyle:(NSString * _Nonnull)cu;
/// Present a notification using an included style.
/// \param t The text to display as title
///
/// \param s An existing <code>IncludedStatusBarNotificationStyle</code>
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t includedStyle:(enum JDStatusBarNotificationIncludedStyle)s;
/// Present a notification using an included style.
/// \param t The text to display as title
///
/// \param s An existing <code>IncludedStatusBarNotificationStyle</code>
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes. It won’t be called after dismissal.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t includedStyle:(enum JDStatusBarNotificationIncludedStyle)s completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification using an included style.
/// \param t The text to display as title
///
/// \param st The text to display as subtitle
///
/// \param s An existing <code>IncludedStatusBarNotificationStyle</code>
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes. It won’t be called after dismissal.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithTitle:(NSString * _Nonnull)t subtitle:(NSString * _Nullable)st includedStyle:(enum JDStatusBarNotificationIncludedStyle)s completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Present a notification using an included style.
/// \param t The text to display as title
///
/// \param d The duration defines how long the notification will be visible. If not provided the notifcation will never be dismissed.
///
/// \param s An existing <code>IncludedStatusBarNotificationStyle</code>
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithText:(NSString * _Nonnull)t dismissAfterDelay:(double)d includedStyle:(enum JDStatusBarNotificationIncludedStyle)s;
/// Present a notification using a custom subview.
/// The <code>customView</code> will be layouted correctly according to the selected style & the current device
/// state (rotation, status bar visibility, etc.). The background will still be styled & layouted
/// according to the provided style. If your custom view requires custom touch handling,
/// make sure to set <code>style.canTapToHold</code> to <code>false</code>. Otherwise the <code>customView</code> won’t
/// receive any touches, as the internal <code>gestureRecognizer</code> would receive them.
/// \param cv A custom UIView to display as notification content.
///
/// \param s The name of the style. You can use styles previously added using e.g. <code>addStyle(named:usingStyle:prepare:)</code>.
/// If no style can be found for the given <code>styleName</code> or it is <code>nil</code>, the default style will be used.
///
/// \param c A <code>Completion</code> closure, which gets called once the presentation animation finishes.
///
///
/// returns:
/// The presented UIView for further customization
- (UIView * _Nonnull)presentWithCustomView:(UIView * _Nonnull)cv styleName:(NSString * _Nullable)s completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Dismisses the displayed notification.
- (void)dismiss;
/// Dismisses the displayed notification.
/// \param c A <code>Completion</code> closure, which gets called once the dismiss animation finishes.
///
- (void)dismissWithCompletion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Dismisses the displayed notification.
/// \param a If <code>true</code>, the notification will be dismissed animated according to the currently set <code>StatusBarNotificationAnimationType</code>.
/// Otherwise it will be dismissed without animation.
///
- (void)dismissAnimated:(BOOL)a;
/// Dismisses the displayed notification after the provided delay.
/// \param d The delay in seconds, before the notification should be dismissed.
///
- (void)dismissAfterDelay:(double)d;
/// Dismisses the displayed notification after the provided delay.
/// \param d The delay in seconds, before the notification should be dismissed.
///
/// \param c A <code>Completion</code> closure, which gets called once the dismiss animation finishes.
///
- (void)dismissAfterDelay:(double)d completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Dismisses the displayed notification after the provided delay.
/// \param a If <code>true</code>, the notification will be dismissed animated according to the currently set <code>StatusBarNotificationAnimationType</code>.
/// Otherwise it will be dismissed without animation.
///
/// \param d The delay in seconds, before the notification should be dismissed.
///
/// \param c A <code>Completion</code> closure, which gets called once the dismiss animation finishes.
///
- (void)dismissAnimated:(BOOL)a afterDelay:(double)d completion:(void (^ _Nullable)(JDStatusBarNotificationPresenter * _Nonnull))c;
/// Adds a new named style, which can later be used by referencing it using the <code>styleName</code>.
/// The added style can be used in future presentations by utilizing the same <code>styleName</code> in e.g. <code>present(_:subtitle:styleName:duration:completion:)</code>.
/// If a style with the same name already exists, it will be replaced.
/// \param n The styleName which will later be used to reference the added style.
///
/// \param p Provides an <code>StatusBarNotificationStyle</code> instance based on the provided <code>includedStyle</code> for further customization.
///
///
/// returns:
/// Returns the <code>styleName</code>, so that this call can be used directly within a presentation call.
- (NSString * _Nonnull)addStyleNamed:(NSString * _Nonnull)n prepare:(SWIFT_NOESCAPE JDStatusBarNotificationStyle * _Nonnull (^ _Nonnull)(JDStatusBarNotificationStyle * _Nonnull))p;
@end


/// A protocol for a custom controller, which controls the size of a presented custom view.
SWIFT_PROTOCOL_NAMED("NotificationPresenterCustomViewSizingController")
@protocol JDStatusBarNotificationPresenterCustomViewSizingController
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines the animation used during presentation and dismissal of the notification.
/// Default is <code>StatusBarNotificationAnimationType/move</code>
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationAnimationType, "StatusBarNotificationAnimationType", open) {
/// Slide in from the top of the screen and slide back out to the top. This is the default.
  JDStatusBarNotificationAnimationTypeMove = 0,
/// Fall down from the top and bounce a little bit, before coming to a rest. Slides back out to the top.
  JDStatusBarNotificationAnimationTypeBounce = 1,
/// Fade-in and fade-out in place. No movement animation.
  JDStatusBarNotificationAnimationTypeFade = 2,
};

@class UIColor;
enum JDStatusBarNotificationBackgroundType : NSInteger;
@class JDStatusBarNotificationPillStyle;

/// Defines the appearance of the notification background.
SWIFT_CLASS_NAMED("StatusBarNotificationBackgroundStyle")
@interface JDStatusBarNotificationBackgroundStyle : NSObject
/// The background color of the notification bar
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The background type. Default is <code>StatusBarNotificationBackgroundType/pill</code>
@property (nonatomic) enum JDStatusBarNotificationBackgroundType backgroundType;
/// Defines the appearance of the pill, when using <code>StatusBarNotificationBackgroundType/pill</code>
@property (nonatomic, strong) JDStatusBarNotificationPillStyle * _Nonnull pillStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the appearance of the notification background.
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationBackgroundType, "StatusBarNotificationBackgroundType", open) {
/// The background covers the full display width and the full status bar + navbar height.
  JDStatusBarNotificationBackgroundTypeFullWidth = 0,
/// The background is a floating pill around the text. The pill size and appearance can be customized. This is the default.
  JDStatusBarNotificationBackgroundTypePill = 1,
};

/// Defines the appearance of a left-view, if set. This includes the activity indicator.
/// The default is <code>StatusBarNotificationLeftViewAlignment/centerWithText</code>.
/// If no title or subtitle is set, the left-view is always fully centered.
/// Note: This can also influence the text layout as described below.
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationLeftViewAlignment, "StatusBarNotificationLeftViewAlignment", open) {
/// Aligns the left-view on the left side of the notification. The text is center-aligned unless it touches the left-view.
/// If the text does touch the left-view, the text will also be left-aligned.
/// If no title or subtitle is set, the left-view is always fully centered.
  JDStatusBarNotificationLeftViewAlignmentLeft = 0,
/// Centers the left-view together with the text. The left-view will be positioned at the leading edge of the text. The text is left-aligned. This is the default.
/// If no title or subtitle is set, the left-view is always fully centered.
  JDStatusBarNotificationLeftViewAlignmentCenterWithText = 1,
};


/// Defines the appearance of a left-view, if set. It also applies to the activity indicator.
SWIFT_CLASS_NAMED("StatusBarNotificationLeftViewStyle")
@interface JDStatusBarNotificationLeftViewStyle : NSObject
/// The minimum distance between the left-view and the text. Defaults to 5.0.
@property (nonatomic) double spacing;
/// An optional offset to adjust the left-views position. Default 0.0.
@property (nonatomic) double offsetX SWIFT_DEPRECATED_MSG("", "offset");
/// An optional offset to adjust the left-views position. Default is <code>CGPointZero</code>.
@property (nonatomic) CGPoint offset;
/// Sets the tint color of the left-view. Default is <code>nil</code>.
/// This applies to the activity indicator, or a custom left-view. The activity indicator
/// defaults to the title text color, if no tintColor is specified.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The alignment of the left-view. The default is <code>StatusBarNotificationLeftViewAlignment/centerWithText</code>
/// If no title or subtitle is set, the left-view is always fully centered.
@property (nonatomic) enum JDStatusBarNotificationLeftViewAlignment alignment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the appearance of the pill, when using <code>StatusBarNotificationBackgroundType/pill</code>
SWIFT_CLASS_NAMED("StatusBarNotificationPillStyle")
@interface JDStatusBarNotificationPillStyle : NSObject
/// The height of the pill. Default is <code>50.0</code>.
@property (nonatomic) double height;
/// The spacing between the pill and the statusbar or top of the screen.. Default is <code>0.0</code>.
@property (nonatomic) double topSpacing;
/// The minimum with of the pill. Default is <code>200.0</code>.
/// If this is lower than the pill height, the pill height is used as minimum width.
@property (nonatomic) double minimumWidth;
/// The border color of the pill. The default is <code>nil</code>, meaning no border.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// The width of the pill border. The default is <code>2.0</code>.
@property (nonatomic) double borderWidth;
/// The shadow color of the pill shadow. The default is <code>nil</code>, meaning no shadow.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// The shadow radius of the pill shadow. The default is <code>4.0</code>.
@property (nonatomic) double shadowRadius;
/// The shadow offset for the pill shadow. The default is <code>(0, 2)</code>.
@property (nonatomic) CGSize shadowOffset SWIFT_DEPRECATED_MSG("", "shadowOffsetXY");
/// The shadow offset for the pill shadow. The default is <code>(0, 2)</code>.
@property (nonatomic) CGPoint shadowOffsetXY;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the position of the progress bar, when used.
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationProgressBarPosition, "StatusBarNotificationProgressBarPosition", open) {
/// The progress bar will be at the bottom of the notification content. This is the default.
  JDStatusBarNotificationProgressBarPositionBottom = 0,
/// The progress bar will be at the center of the notification content.
  JDStatusBarNotificationProgressBarPositionCenter = 1,
/// The progress bar will be at the top of the notification content.
  JDStatusBarNotificationProgressBarPositionTop = 2,
};


/// Defines the appearance of the progress bar.
SWIFT_CLASS_NAMED("StatusBarNotificationProgressBarStyle")
@interface JDStatusBarNotificationProgressBarStyle : NSObject
/// The background color of the progress bar (on top of the notification bar)
@property (nonatomic, strong) UIColor * _Nullable barColor;
/// The height of the progress bar. Default is <code>2.0</code>. The applied minimum is 0.5 and the maximum equals the full height of the notification.
@property (nonatomic) double barHeight;
/// The position of the progress bar. Default is <code>StatusBarNotificationProgressBarPosition/bottom</code>
@property (nonatomic) enum JDStatusBarNotificationProgressBarPosition position;
/// The insets of the progress bar. Default is <code>20.0</code>
@property (nonatomic) double horizontalInsets;
/// Offsets the progress bar on the  y-axis. Default is <code>-5.0</code>.
@property (nonatomic) double offsetY;
/// The corner radius of the progress bar. Default is <code>1.0</code>
@property (nonatomic) double cornerRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class JDStatusBarNotificationTextStyle;
enum JDStatusBarNotificationSystemBarStyle : NSInteger;

/// A Style defines the appearance of a notification.
SWIFT_CLASS_NAMED("StatusBarNotificationStyle")
@interface JDStatusBarNotificationStyle : NSObject
/// Defines the appearance of the title label.
/// Defaults: <code>UIFontTextStyleFootnote</code>, color: <code>.gray</code> and adjusts for dark mode.
/// The title’s <code>textColor</code> is also used for the activity indicator, unless an explicit <code>leftViewStyle.tintColor</code> is set.
/// The title’s <code>textOffsetY</code> affects both the title, the subtitle and the left-view. And also the progressBar when using <code>.center</code> positioning.
@property (nonatomic, strong) JDStatusBarNotificationTextStyle * _Nonnull textStyle;
/// Defines the appearance of the subtitle label.
/// Defaults: <code>UIFontTextStyleCaption1</code>, color: The title color at 66% opacity.
/// The subtitle’s .textOffsetY affects only the subtitle.
@property (nonatomic, strong) JDStatusBarNotificationTextStyle * _Nonnull subtitleStyle;
/// Defines the appearance of the notification background.
/// That includes the <code>StatusBarNotificationBackgroundStyle/backgroundColor</code>,
/// the <code>StatusBarNotificationBackgroundStyle/backgroundType</code>
/// and the <code>StatusBarNotificationBackgroundStyle/pillStyle</code> (See <code>StatusBarNotificationPillStyle</code>).
@property (nonatomic, strong) JDStatusBarNotificationBackgroundStyle * _Nonnull backgroundStyle;
/// Defines the appearance of the progress bar.
@property (nonatomic, strong) JDStatusBarNotificationProgressBarStyle * _Nonnull progressBarStyle;
/// Defines the appearance of a left-view, if set. It also applies to the activity indicator.
@property (nonatomic, strong) JDStatusBarNotificationLeftViewStyle * _Nonnull leftViewStyle;
/// Defines which <code>UIStatusBarStyle</code> should be used during presentation.
/// If you use <code>StatusBarNotificationBackgroundType/pill</code>, this is ignored.
/// The default is <code>StatusBarNotificationSystemBarStyle/defaultStyle</code>.
@property (nonatomic) enum JDStatusBarNotificationSystemBarStyle systemStatusBarStyle;
/// Defines the animation used during presentation and dismissal of the notification.
/// Default is <code>StatusBarNotificationAnimationType/move</code>
@property (nonatomic) enum JDStatusBarNotificationAnimationType animationType;
/// Defines if the bar can be dismissed by the user swiping up. Default is <code>true</code>.
/// Under the hood this enables/disables the internal <code>PanGestureRecognizer</code>.
@property (nonatomic) BOOL canSwipeToDismiss;
/// Defines if the bar can be touched to prevent a dismissal until the tap is released. Default is <code>true</code>.
/// If <code>StatusBarNotificationStyle/canTapToHold</code> is <code>true</code>
/// and <code>StatusBarNotificationStyle/canDismissDuringUserInteraction</code> is <code>false</code>,
/// the user can tap the notification to prevent it from being dismissed until the tap is released.
/// If you are utilizing a custom view and need custom touch handling (e.g. for a button), you should set this to <code>false</code>.
/// Under the hood this enables/disables the internal <code>LongPressGestureRecognizer</code>.
@property (nonatomic) BOOL canTapToHold;
/// Defines if the bar is allowed to be dismissed while the user touches or pans the view.
/// The default is <code>false</code>, meaning that a notification stays presented as long as a touch or pan is active.
/// Once the touch is released, the view will be dismised (if a dismiss call was made during the interaction).
/// Any passed-in dismiss completion block will still be executed, once the actual dismissal happened.
@property (nonatomic) BOOL canDismissDuringUserInteraction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines which <code>UIStatusBarStyle</code> should be used during presentation.
/// Note that if you use <code>StatusBarNotificationBackgroundType/pill</code>, this is ignored.
/// The default is <code>StatusBarNotificationSystemBarStyle/defaultStyle</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, JDStatusBarNotificationSystemBarStyle, "StatusBarNotificationSystemBarStyle", open) {
/// Matches the current viewController / window.
  JDStatusBarNotificationSystemBarStyleDefaultStyle = 0,
/// Forces light status bar contents (<code>UIStatusBarStyleLightContent</code>)
  JDStatusBarNotificationSystemBarStyleLightContent = 1,
/// Forces dark status bar contents (<code>UIStatusBarStyleDarkContent</code>)
  JDStatusBarNotificationSystemBarStyleDarkContent = 2,
};

@class UIFont;

/// Defines the appearance of a text label.
SWIFT_CLASS_NAMED("StatusBarNotificationTextStyle")
@interface JDStatusBarNotificationTextStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTextColor:(UIColor * _Nullable)textColor font:(UIFont * _Nullable)font OBJC_DESIGNATED_INITIALIZER;
/// The color of the  label.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// The font of the label.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The text shadow color, the default is <code>nil</code>, meaning no shadow.
@property (nonatomic, strong) UIColor * _Nullable textShadowColor SWIFT_DEPRECATED_MSG("", "shadowColor");
/// The text shadow color, the default is <code>nil</code>, meaning no shadow.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// The text shadow offset of the notification label. Default is <code>(1, 2)</code>
@property (nonatomic) CGSize textShadowOffset SWIFT_DEPRECATED_MSG("", "shadowOffset");
/// The text shadow offset of the notification label. Default is <code>(1, 2)</code>
@property (nonatomic) CGPoint shadowOffset;
/// Offsets the text label on the y-axis. Default is <code>0.0</code>.
@property (nonatomic) double textOffsetY;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
